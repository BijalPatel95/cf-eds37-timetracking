AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy nodejs to lambda
Parameters:
  Stack:
    Type: String
    Default: eds37-timetracking

  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod

  PrivateSubnets:
    Description: VPC Private PrivateSubnets
    Type: List<AWS::EC2::Subnet::Id>

  VPCID:
    Description: Master VPC ID
    Type: AWS::EC2::VPC::Id

Resources:
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: !Sub '${Stage}-${Stack}-app-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:DescribeLogGroups'
            - 'logs:DescribeLogStreams'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: "*"
          - Effect: Allow
            Action:
            - 'secretsmanager:GetSecretValue'
            Resource: '*'
          - Effect: Allow
            Action:
            - 'ses:SendRawEmail'
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
      Path: "/"
      RoleName: !Sub '${Stage}-cf-${Stack}-role'

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: !Sub CF Security Group for ${Stage} ${Stack} app
      GroupName: !Sub ${Stage}-cf-${Stack}
      VpcId: !Ref VPCID

  #EDS37 time tracking lambda       
  EDS37TimeTrackingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          exports.handler = function(event, context, callback) {
              callback(null);
          };
      FunctionName: !Sub '${Stage}-cf-${Stack}-app'
      Handler: lambda.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs10.x
      Timeout: 30
      Environment:
        Variables:
          stage: !Ref Stage
          AWS_DB_SECRET_MANAGER_KEY: !Sub ${Stage}/mssql/quant
      VpcConfig:
        SecurityGroupIds: 
          - !Ref AppSecurityGroup
        SubnetIds: !Ref PrivateSubnets
    DependsOn:
    - IamRoleLambdaExecution

  # Lambda scheduled to Trigger at 8am every Monday
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Lambda Scheduled to Trigger at 8am every Monday"
      ScheduleExpression: cron(0 12 ? * MON *)
      State: "ENABLED"
      Targets:
        - Arn: !Sub ${EDS37TimeTrackingLambdaFunction.Arn}
          Id: ScheduledRule


  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Sub ${EDS37TimeTrackingLambdaFunction.Arn}
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${ScheduledRule.Arn}
